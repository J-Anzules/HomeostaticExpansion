library(ggbreak)
ModeldataWT = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputWT2.csv")
ModeldataKO = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputKO2.csv")
WTData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedWTSpleen.csv")
ProlWTData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv")
KOData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedKOSpleen.csv")
ProlKOData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/KOProl.csv")
WTData$hours = WTData$hours / 24
KOData$hours = KOData$hours / 24
ProlWTData$hours = ProlWTData$hours / 24
ProlKOData$hours = ProlKOData$hours / 24
colnames(ModeldataWT) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
"TregNaive", "ProlNaive", "ProlActT", "ProlTreg", "IL-2", "ThymWeigth")
colnames(ModeldataKO) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
"TregNaive", "ProlNaive", "ProlActT", "ProlTreg", "IL-2", "ThymWeigth")
ModeldataWT$time = 0:431
ModeldataKO$time = 0:431
ModeldataWT$time = ModeldataWT$time / 24
ModeldataKO$time = ModeldataKO$time / 24
dotsize = 4
wdt = 14.6
ht = 8.3
Dotedline = 2
simLine = 2
colnames(ModeldataWT) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
"TregNaive", "ProlNaive", "ProlActT", "ProlTreg", "IL-2", "ThymWeigth")
colnames(ModeldataKO) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
ModeldataWT = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputWT2.csv")
ModeldataKO = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputKO2.csv")
ModeldataWT = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputWT2.csv")
ModeldataKO = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputKO2.csv")
WTData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedWTSpleen.csv")
ProlWTData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv")
KOData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedKOSpleen.csv")
ProlKOData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/KOProl.csv")
WTData$hours = WTData$hours / 24
KOData$hours = KOData$hours / 24
ProlWTData$hours = ProlWTData$hours / 24
ProlKOData$hours = ProlKOData$hours / 24
colnames(ModeldataWT) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
"TregNaive", "ProlNaive", "ProlActT", "ProlTreg", "IL-2", "ThymWeigth")
colnames(ModeldataKO) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
"TregNaive", "ProlNaive", "ProlActT", "ProlTreg", "IL-2", "ThymWeigth")
ModeldataWT$time = 0:431
ModeldataKO$time = 0:431
ModeldataWT$time = ModeldataWT$time / 24
ModeldataKO$time = ModeldataKO$time / 24
library(pracma)
install.packages("pracma")
library(pracma)
auc_wt <- trapz(ModeldataWT$time, ModeldataWT$TregNaive)
auc_ko <- trapz(ModeldataKO$time, ModeldataKO$TregNaive)
wilcox.test(ModeldataWT$TregNaive, ModeldataKO$TregNaive)
# Compare the AUCs using the Mann-Whitney U test
test_result <- wilcox.test(ModeldataWT$TregNaive, ModeldataKO$TregNaive)
# Output the AUC values and test results
list(AUC_WT = auc_wt, AUC_KO = auc_ko, Test_Result = test_result)
auc_wt
auc_ko
# Compare the AUCs using the Mann-Whitney U test
test_result <- wilcox.test(x = auc_WT, y = auc_KO, alternative = "two.sided")
# Compare the AUCs using the Mann-Whitney U test
test_result <- wilcox.test(x = auc_wt, y = auc_ko, alternative = "two.sided")
test_result
# Output the AUC values and test results
list(AUC_WT = auc_wt, AUC_KO = auc_ko, Test_Result = test_result)
auc_wt <- trapz(ModeldataWT$time, ModeldataWT$TregCT)
auc_ko <- trapz(ModeldataKO$time, ModeldataKO$TregCT)
#
test_result <- wilcox.test(ModeldataWT$TregNaive, ModeldataKO$TregNaive)
# Output the AUC values and test results
list(AUC_WT = auc_wt, AUC_KO = auc_ko, Test_Result = test_result)
auc_wt - auc_ko
#-------------------------------------------------------#
#             Open ALL
#-------------------------------------------------------#
Min_all = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ParameterSearch_opnall5.csv")
hist(Min_all$Error, breaks = 100, xlim = c(2100, 4500),
xlab = "Relative Error Range",
main = "Relative Error Distribution",
ylab = "Frequency Counts")
summary(Min_all)
summary(Min_all$Error)
WTProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv')
KOProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/KOProl.csv')
ActivatedWTSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedWTSpleen.csv')
ActivatedKOSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedKOSpleen.csv')
ActT = read.csv('C:/Laptop Backups/HomestaticExpansionProject/ModelData/TCellActivationSummary_filled.csv')
ActT$Genotype[ActT$Genotype == "IL-2-KO"] = "KO"
ActT$Genotype[ActT$Genotype == "IL-2-HET"] = "WT"
ActT$Genotype[ActT$Genotype == "CD25-KO"] = "KO"
ActT[ActT$Genotype != "",]
ActT = ActT[!(ActT$Genotype == ""),]
ActT$Age <- ifelse(ActT$Age >= 18, 18, ActT$Age)
ActT = subset(ActT, Age <= 18 & Age > 0)
#Removing age 16
ActT = ActT[ActT$Age != 16, ]
#Removing age 7
ActT = ActT[ActT$Age != 7, ]
WTProl$NaiveProlCT
perform_custom_test <- function(dataset_type, columns_of_interest, default_comparison_type = "greater") {
# Initialize an empty dataframe to store all results
all_results_df <- data.frame(column_of_interest=character(),
age=integer(),
p_value=numeric(),
test=character(),
hypothesis=character(),
n_values=character(),
stringsAsFactors=FALSE)
all_results_failed <- data.frame(column_of_interest=character(),
age=integer(),
p_value=numeric(),
test=character(),
hypothesis=character(),
n_values=character(),
stringsAsFactors=FALSE)
# Columns requiring 'less' comparison
columns_less_comparison <- c("X4TregCT", "X4TregRatio")
# # Columns requiring a t-test
# data_ttest <- c("NonProlActivatedRatio", "ActivatedProlRatio", "X4TregRatio")
# Iterate over each column of interest
for (column_of_interest in columns_of_interest) {
# Determine the comparison type based on the column
comparison_type <- ifelse(column_of_interest %in% columns_less_comparison, "less", default_comparison_type)
# Select appropriate datasets based on dataset_type
if (dataset_type == "prol") {
WT_data <- WTProl
KO_data <- KOProl
} else if (dataset_type == "activated spleen") {
WT_data <- ActivatedWTSpleen
KO_data <- ActivatedKOSpleen
} else {
stop("Invalid dataset type provided.")
}
# Get all unique ages from both datasets
all_ages <- unique(c(WT_data$Age, KO_data$Age))
# Loop through each age
for (age in all_ages) {
# Subset the data for the current age
wt_age_data <- subset(WT_data, Age == age)[, column_of_interest, drop=FALSE]
ko_age_data <- subset(KO_data, Age == age)[, column_of_interest, drop=FALSE]
# Construct a key for lookup
check_key <- paste(age, column_of_interest, sep="_")
# Check if both subsets have data
if (nrow(wt_age_data) > 0 & nrow(ko_age_data) > 0) {
# Decide which test to use based on the reference
if (check_key %in% nor_dist_flat) {
# If the age-column combination is in the normally distributed reference, use t.test
test_result <- tryCatch(t.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type),
error = function(e) list(p.value = NA, statistic = NA))
test_type = "t.test"
} else {
# Otherwise, use wilcox.test
test_result <- tryCatch(wilcox.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type, exact = FALSE),
error = function(e) list(p.value = NA, statistic = NA))
test_type = "wilcox"
}
# if (test_type == "t.test") {
#   test_result <- t.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type)
# } else {
#   test_result <- wilcox.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type, exact = FALSE)
# }
# Number of values for WT and KO
n_values_wt <- nrow(wt_age_data)
n_values_ko <- nrow(ko_age_data)
# Append to all_results_df if p-value <= 0.05
if (test_result$p.value <= 0.05) {
all_results_df <- rbind(all_results_df, data.frame(column_of_interest=column_of_interest,
age=age,
p_value=test_result$p.value,
test=test_type,
hypothesis=comparison_type,
n_values=paste(n_values_wt, n_values_ko, sep=", ")))
} else {
all_results_failed <- rbind(all_results_failed, data.frame(column_of_interest=column_of_interest,
age=age,
p_value=test_result$p.value,
test=test_type,
hypothesis=comparison_type,
n_values=paste(n_values_wt, n_values_ko, sep=", ")))
}
}
}
}
return(list(passed = all_results_df, failed = all_results_failed))
}
actT_naive_columns <- c("ThymicNaive", "NaiveCT")
prol_naive_columns <- c("NaiveProlRatio", "NaiveProlCT")
naive_acT_results <- perform_custom_test("activated spleen", actT_naive_columns)
#
# # #Preparing final dataframe
# # all_results_df <- data.frame(age=integer(),
# #                          comparison_type=character(),
# #                          p_value=numeric(),
# #                          test=character(),
# #                          hypothesis=character(),
# #                          stringsAsFactors=FALSE)
# #
# Based on Shapiro_Wilk_Normal_columns.csv & Shapiro_Wilk_ActT_Normal_columns.csv results
nor_dist_reference <- list(c(4, "X4TregRatio"), c(4, "ActivatedProlRatio"),
c(4, "NonProlActivatedRatio"), c(4, "ActivatedProlRatio"),
c(4, "pct_CD4_CD44_pos_CD62L_neg"), c(4, "pct_CD4_CD69_pos"),
c(9, "NonProlActivatedCT"), c(9, "ActivatedProlCT"),
c(9, "EarlyActivatedCD4CT"), c(9, "X4TregCT"),
c(9, "ActivatedCD4CT"),
c(12, "pct_CD4_CD44_pos_CD62L_neg"),
c(14, "pct_CD4_CD44_pos_CD62L_neg"), c(14, "pct_CD4_CD69_pos"),
c(18, "X4TregRatio"), c(18, "pct_CD4_CD69_pos"))
#Flattening the data for easy referencing
nor_dist_flat <- sapply(nor_dist_reference, function(x) paste(x[1], x[2], sep="_"))
naive_acT_results <- perform_custom_test("activated spleen", actT_naive_columns)
naive_actT_passed <- naive_acT_results$passed
naive_actT_failed <- naive_acT_results$failed
View(naive_actT_failed)
library(scales)
library(ggplot2)
library(scales)
library(tidyr)
library(ggpubr)
dotSize = 6
xAxisTextSize = 10
yAxisTextSize = 10
titleAxisTextSize = 12
panelBorder = 2
#Makign a function that change the decimal places ofy axis values
scaleFUN <- function(x) sprintf("%.1f", x)
#Creating Y axis label for D-F
# YlabelDF = expression(CD44^"+"~CD62L^"-"~(10^6))
YlabelA =  expression("%"~CD4^"+"~CD69^"+")
YlabelB =  expression(~CD4^"+"~CD69^"+"~"Cells"~(10^6))
YlabelC = expression("%"~CD44^"+"~CD62L^"-"~kI67^"-")
YlabelD = expression(~CD44^"+"~CD62L^"-"~kI67^"-"~"Cells"~(10^6))
YlabelE = expression("%"~CD44^"+"~CD62L^"-"~kI67^"+")
YlabelF = expression(~CD44^"+"~CD62L^"-"~kI67^"+"~"Cells"~(10^6))
YlabelG = expression("%"~CD4^"+"~Foxp3^"+")
YlabelH = expression(CD4^"+"~Foxp3^"+"~"Cells"~(10^6))
#Color selection
WTColor = "#8c8c8c"
KOColor = "#000000"
WTProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv')
KOProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/KOProl.csv')
ActivatedWTSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedWTSpleen.csv')
ActivatedKOSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedKOSpleen.csv')
ActT = read.csv('C:/Laptop Backups/HomestaticExpansionProject/ModelData/TCellActivationSummary_filled.csv')
ActT$Genotype[ActT$Genotype == "IL-2-KO"] = "KO"
ActT$Genotype[ActT$Genotype == "IL-2-HET"] = "WT"
ActT$Genotype[ActT$Genotype == "CD25-KO"] = "KO"
ActT[ActT$Genotype != "",]
ActT = ActT[!(ActT$Genotype == ""),]
ActT = subset(ActT, Age <= 18 & Age > 0)
ActT = ActT[ActT$Age != 16, ]
CD4CD69 =
ggplot(ActT, aes(Age, pct_CD4_CD69_pos, color = Genotype, shape = Genotype))+
scale_color_manual(values = c(KOColor, WTColor))+
geom_point(position = position_dodge(1), size = dotSize)+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_y_continuous(limits=c(-2.052, 40), breaks = c(0, 13, 26, 39))+
labs(titles = "Early Activation Percentage", x = "Age in Days", y =YlabelA)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
# legend.position = c(0.15, 0.85),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
stat_summary(aes(group=Genotype, color = Genotype), fun=mean, geom="line", lwd = 1.3)
ActivatedWTSpleen$EarlyActivatedCD4CTWT = ActivatedWTSpleen$EarlyActivatedCD4CT
#Setting up Data
EarlyActivatedCD4CTWT = subset(ActivatedWTSpleen, select = c("EarlyActivatedCD4CTWT", "Age"))
LongEarlyActivatedCD4CTWT = gather(EarlyActivatedCD4CTWT, variable, value, -Age)
EarlyActivatedCD4CTKO = subset(ActivatedKOSpleen, select = c("EarlyActivatedCD4CT", "Age"))
LongEarlyActivatedCD4CTKO = gather(EarlyActivatedCD4CTKO, variable, value, -Age)
LongEarlyActivatedCD4CT = rbind(LongEarlyActivatedCD4CTWT, LongEarlyActivatedCD4CTKO)
LongEarlyActivatedCD4CT$variable = factor(LongEarlyActivatedCD4CT$variable,
levels = c("EarlyActivatedCD4CT", "EarlyActivatedCD4CTWT"),
labels = c( "KO", "WT"))
EarlyActivated_CT =
ggplot(LongEarlyActivatedCD4CT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Early Activation Cell Count", x = "Age in Days", y = YlabelB)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_y_continuous(breaks = c(0.0, 0.3, 0.6, 0.9), limits=c(-0.043605, 0.9))+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend("Legend"))
WTProl$NonProlActivatedRatioWT = WTProl$NonProlActivatedRatio * 100
KOProl$NonProlActivatedRatio = KOProl$NonProlActivatedRatio * 100
#Setting up Data
NonProlActivatedRatioWT = subset(WTProl, select = c("NonProlActivatedRatioWT", "Age"))
LongNonProlActivatedRatioWT = gather(NonProlActivatedRatioWT, variable, value, -Age)
NonProlActivatedRatioKO = subset(KOProl, select = c("NonProlActivatedRatio", "Age"))
LongNonProlActivatedRatioKO = gather(NonProlActivatedRatioKO, variable, value, -Age)
LongNonProlActivatedRatio = rbind(LongNonProlActivatedRatioWT, LongNonProlActivatedRatioKO)
LongNonProlActivatedRatio$variable = factor(LongNonProlActivatedRatio$variable,
levels = c("NonProlActivatedRatio", "NonProlActivatedRatioWT"),
labels = c("KO", "WT"))
NonProlActT_pct =
ggplot(LongNonProlActivatedRatio, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Percentage of Non Proliferating Activated T Cells", x = "Age in Days", y = YlabelC)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_y_continuous(breaks = c(40, 60, 80, 100), limits=c(34.87, 105))+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend("Legend"))
WTProl$NonProlActivatedCTWT = WTProl$NonProlActivatedCT
#Setting up Data
NonProlActivatedCTWT = subset(WTProl, select = c("NonProlActivatedCTWT", "Age"))
LongNonProlActivatedCTWT = gather(NonProlActivatedCTWT, variable, value, -Age)
NonProlActivatedCTKO = subset(KOProl, select = c("NonProlActivatedCT", "Age"))
LongNonProlActivatedCTKO = gather(NonProlActivatedCTKO, variable, value, -Age)
LongNonProlActivatedCT = rbind(LongNonProlActivatedCTWT, LongNonProlActivatedCTKO)
LongNonProlActivatedCT$variable = factor(LongNonProlActivatedCT$variable,
levels = c("NonProlActivatedCT", "NonProlActivatedCTWT"),
labels = c("KO", "WT"))
NonProlActT_CT =
ggplot(LongNonProlActivatedCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Non Proliferating Activated T Cell Counts", x = "Age in Days", y = YlabelD)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_y_continuous(limits=c(-235980, 4400000), breaks = c(0, 1400642, 2801284, 4201926),
labels = c(0.0, 1.4, 2.8, 4.2))+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend("Legend"))
WTProl$ActivatedProlRatioWT = WTProl$ActivatedProlRatio * 100
KOProl$ActivatedProlRatio = KOProl$ActivatedProlRatio * 100
#Setting up Data
ActivatedProlRatioWT = subset(WTProl, select = c("ActivatedProlRatioWT", "Age"))
LongActivatedProlRatioWT = gather(ActivatedProlRatioWT, variable, value, -Age)
ActivatedProlRatioKO = subset(KOProl, select = c("ActivatedProlRatio", "Age"))
LongActivatedProlRatioKO = gather(ActivatedProlRatioKO, variable, value, -Age)
LongActivatedProlRatio = rbind(LongActivatedProlRatioWT, LongActivatedProlRatioKO)
LongActivatedProlRatio$variable = factor(LongActivatedProlRatio$variable,
levels = c("ActivatedProlRatio", "ActivatedProlRatioWT"),
labels = c("KO", "WT"))
ProlActT_pct =
ggplot(LongActivatedProlRatio, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Proliferating Activated T Cells Percentage", x = "Age in Days", y = YlabelE)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_y_continuous(breaks = c(0, 20, 40, 60), limits=c(-3.078, 65))+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend("Legend"))
# 0 - (60*0.0513)
#=============================================================================================#
#----------------------- Figure 1F - Proliferating Activated T Cells Count -------------------#
#=============================================================================================#
WTProl$ActivatedProlCTWT = WTProl$ActivatedProlCT
#Setting up Data
ActivatedProlCTWT = subset(WTProl, select = c("ActivatedProlCTWT", "Age"))
LongActivatedProlCTWT = gather(ActivatedProlCTWT, variable, value, -Age)
ActivatedProlCTKO = subset(KOProl, select = c("ActivatedProlCT", "Age"))
LongActivatedProlCTKO = gather(ActivatedProlCTKO, variable, value, -Age)
LongActivatedProlCT = rbind(LongActivatedProlCTWT, LongActivatedProlCTKO)
LongActivatedProlCT$variable = factor(LongActivatedProlCT$variable, levels = c("ActivatedProlCT", "ActivatedProlCTWT"), labels = c("KO", "WT"))
ProlActT_CT =
ggplot(LongActivatedProlCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Proliferating Activated T Cell Counts", x = "Age in Days", y = YlabelF)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_y_continuous(limits=c(-76900.01, 1500000), breaks = c( 0, 500000, 1000000, 1500000),
labels = c(0, 0.5, 1.0, 1.5))+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend("Legend"))
#=============================================================================================#
#--------------------------------- Figure 1G - Treg Percentage -------------------------------#
#=============================================================================================#
ActivatedWTSpleen$X4TregRatio = ActivatedWTSpleen$X4TregRatio * 100
ActivatedKOSpleen$X4TregRatio = ActivatedKOSpleen$X4TregRatio * 100
ActivatedWTSpleen$X4TregRatioWT = ActivatedWTSpleen$X4TregRatio
#Setting up Data
X4TregRatioWT = subset(ActivatedWTSpleen, select = c("X4TregRatioWT", "Age"))
LongX4TregRatioWT = gather(X4TregRatioWT, variable, value, -Age)
X4TregRatioKO = subset(ActivatedKOSpleen, select = c("X4TregRatio", "Age"))
LongX4TregRatioKO = gather(X4TregRatioKO, variable, value, -Age)
LongX4TregRatio = rbind(LongX4TregRatioWT, LongX4TregRatioKO)
LongX4TregRatio$variable = factor(LongX4TregRatio$variable, levels = c("X4TregRatio", "X4TregRatioWT"),
labels = c("KO", "WT"))
Treg_pct =
ggplot(LongX4TregRatio, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Percentage of Treg Cells", x = "Age in Days", y = YlabelG)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_y_continuous(limits=c(0, 18), breaks = c(0, 6, 12, 18))+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend("Legend"))
ActivatedWTSpleen$X4TregCTWT = ActivatedWTSpleen$X4TregCT
#Setting up Data
X4TregCTWT = subset(ActivatedWTSpleen, select = c("X4TregCTWT", "Age"))
LongX4TregCTWT = gather(X4TregCTWT, variable, value, -Age)
X4TregCTKO = subset(ActivatedKOSpleen, select = c("X4TregCT", "Age"))
LongX4TregCTKO = gather(X4TregCTKO, variable, value, -Age)
LongX4TregCT = rbind(LongX4TregCTWT, LongX4TregCTKO)
LongX4TregCT$variable = factor(LongX4TregCT$variable, levels = c( "X4TregCT", "X4TregCTWT"), labels = c("KO", "WT"))
Treg_CT =
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
labels = c(0, 0.4, 0.8, 1.2))+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
a = ggarrange(CD4CD69, EarlyActivated_CT, NonProlActT_pct, NonProlActT_CT, ProlActT_pct, ProlActT_CT,Treg_pct,Treg_CT,
labels = c("A", "B", "C", "D", "E", "F", "G", "H"),
ncol = 2, nrow = 4, widths = c(1, 1), align = "v")
ggsave(file = "C:/Users/jonan/Documents/HomeostaticExpansion/Manuscript/Figures/Figure 1 - Wt vs KO/Figure1_V4_018nodata.pdf", a,
height = 11,
width = 8)
#------------------#
#------------------#
# For the Legned
#------------------#
# For the Legned
#------------------#
#------------------#
# For the Legned
#------------------#
#
#------------------#
# For the Legned
#------------------#
#
# ggplot(LongActivatedProlCT, aes(x = Age, y = value, color = variable)) +
#------------------#
# For the Legned
#------------------#
#
# ggplot(LongActivatedProlCT, aes(x = Age, y = value, color = variable)) +
#   geom_point(position = position_dodge(1), size = dotSize)+
wd()
getwd()
