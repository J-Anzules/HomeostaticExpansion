all_ages <- unique(c(WT_data$Age, KO_data$Age))
# Loop through each age
for (age in all_ages) {
# Subset the data for the current age
wt_age_data <- subset(WT_data, Age == age)[, column_of_interest, drop=FALSE]
ko_age_data <- subset(KO_data, Age == age)[, column_of_interest, drop=FALSE]
# Check if both subsets have data
if (nrow(wt_age_data) > 0 & nrow(ko_age_data) > 0) {
# Determine the test based on the column
if (column_of_interest %in% data_ttest) {
test_result <- t.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type)
test_type = "t.test"
} else {
test_result <- wilcox.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type)
test_type = "wilcox.test"
}
# Append to all_results_df if p-value <= 0.05
if (test_result$p.value <= 0.05) {
all_results_df <- rbind(all_results_df, data.frame(column_of_interest=column_of_interest,
age=age,
p_value=test_result$p.value,
test=test_type,
hypothesis=comparison_type))
}
}
}
}
return(all_results_df)
}
data_ttest <- c("NonProlActivatedRatio", "ActivatedProlRatio", "X4TregRatio")
prol_columns <- c("NonProlActivatedRatio", "NonProlActivatedCT", "ActivatedProlRatio",
"ActivatedProlCT" )
actSpln_columns <-  c("EarlyActivatedCD4CT", "X4TregRatio", "X4TregCT", "ActivatedCD4CT" )
# # Example usage
# default_comparison_type <- "greater" # Default comparison type
# Perform analysis for 'prol' and 'activated spleen' dataset columns with the updated function
results_prol <- perform_custom_test("prol", prol_columns)
results_prol
results_activated_spleen <- perform_custom_test("activated spleen", actSpln_columns)
results_activated_spleen
all_results_df <- rbind(ActT_results_df, results_prol, results_activated_spleen)
all_results_df
file_path <- "C:/Users/jonan/Documents/HomeostaticExpansion/Manuscript/Figures/P-value Table/pvalueTable.csv"
write.csv(all_results_df, file_path,row.names = FALSE)
----------------------------------------------------------------#
WTProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv')
#####
#----------------------------------------------------------------#
#------------------------ Preparing data ------------------------#
#------------------------       and      ------------------------#
#------------------------    Function    ------------------------#
#----------------------------------------------------------------#
WTProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv')
KOProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/KOProl.csv')
ActivatedWTSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedWTSpleen.csv')
ActivatedKOSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedKOSpleen.csv')
# preparing T cell summary
ActT = read.csv('C:/Laptop Backups/HomestaticExpansionProject/ModelData/TCellActivationSummary_filled.csv')
ActT$Genotype[ActT$Genotype == "IL-2-KO"] = "KO"
ActT$Genotype[ActT$Genotype == "IL-2-HET"] = "WT"
ActT$Genotype[ActT$Genotype == "CD25-KO"] = "KO"
ActT[ActT$Genotype != "",]
ActT = ActT[!(ActT$Genotype == ""),]
ActT$Age <- ifelse(ActT$Age >= 18, 18, ActT$Age)
ActT = subset(ActT, Age <= 18 & Age > 0)
#Removing age 16
ActT = ActT[ActT$Age != 16, ]
#Removing age 7
ActT = ActT[ActT$Age != 7, ]
#Preparing final dataframe
all_results_df <- data.frame(age=integer(),
comparison_type=character(),
p_value=numeric(),
test=character(),
hypothesis=character(),
stringsAsFactors=FALSE)
perform_t_test_for_column <- function(WT_dataset, KO_dataset, column_of_interest, comparison_type="greater") {
# Initialize an empty dataframe to store results
results_df <- data.frame(age=integer(),
comparison_type=character(),
p_value=numeric(),
stringsAsFactors=FALSE)
# Get all unique ages from both datasets
all_ages <- unique(c(WT_dataset$Age, KO_dataset$Age))
# Loop through each age
for (age in all_ages) {
# Subset the data for the current age
wt_age_data <- subset(WT_dataset, Age == age)[, column_of_interest, drop=FALSE]
ko_age_data <- subset(KO_dataset, Age == age)[, column_of_interest, drop=FALSE]
# Perform t-test if both subsets have data
if (length(wt_age_data) > 0 & length(ko_age_data) > 0) {
t_test_result <- t.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type)
# Append to results_df regardless of the p-value
results_df <- rbind(results_df, data.frame(age=age,
comparison_type=comparison_type,
p_value=t_test_result$p.value))
}
}
# Return the results dataframe
return(results_df)
}
perform_t_test_for_column(WTProl, KOProl, "NonProlActivatedRatio")
perform_t_test_for_column(WTProl, KOProl, "NonProlActivatedCT")
perform_t_test_for_column(WTProl, KOProl, "ActivatedProlRatio")
perform_t_test_for_column(WTProl, KOProl, "ActivatedProlCT")
perform_custom_test <- function(dataset_type, columns_of_interest, default_comparison_type = "greater") {
# Initialize an empty dataframe to store all results
all_results_df <- data.frame(column_of_interest=character(),
age=integer(),
comparison_type=character(),
p_value=numeric(),
test=character(),
hypothesis=character(),
stringsAsFactors=FALSE)
# Columns requiring 'less' comparison
columns_less_comparison <- c("X4TregCT", "X4TregRatio")
# Columns requiring a t-test
data_ttest <- c("NonProlActivatedRatio", "ActivatedProlRatio", "X4TregRatio")
# Iterate over each column of interest
for (column_of_interest in columns_of_interest) {
# Determine the comparison type based on the column
comparison_type <- ifelse(column_of_interest %in% columns_less_comparison, "less", default_comparison_type)
# Select appropriate datasets based on dataset_type
if (dataset_type == "prol") {
WT_data <- WTProl
KO_data <- KOProl
} else if (dataset_type == "activated spleen") {
WT_data <- ActivatedWTSpleen
KO_data <- ActivatedKOSpleen
} else {
stop("Invalid dataset type provided.")
}
# Get all unique ages from both datasets
all_ages <- unique(c(WT_data$Age, KO_data$Age))
# Loop through each age
for (age in all_ages) {
# Subset the data for the current age
wt_age_data <- subset(WT_data, Age == age)[, column_of_interest, drop=FALSE]
ko_age_data <- subset(KO_data, Age == age)[, column_of_interest, drop=FALSE]
# Check if both subsets have data
if (nrow(wt_age_data) > 0 & nrow(ko_age_data) > 0) {
# Determine the test based on the column
if (column_of_interest %in% data_ttest) {
test_result <- t.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type)
test_type = "t.test"
} else {
test_result <- wilcox.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type)
test_type = "wilcox.test"
}
# Append to all_results_df if p-value <= 0.05
if (test_result$p.value <= 0.05) {
all_results_df <- rbind(all_results_df, data.frame(column_of_interest=column_of_interest,
age=age,
p_value=test_result$p.value,
test=test_type,
hypothesis=comparison_type))
}
}
}
}
return(all_results_df)
}
data_ttest <- c("NonProlActivatedRatio", "ActivatedProlRatio", "X4TregRatio")
prol_columns <- c("NonProlActivatedRatio", "NonProlActivatedCT", "ActivatedProlRatio",
"ActivatedProlCT" )
actSpln_columns <-  c("EarlyActivatedCD4CT", "X4TregRatio", "X4TregCT", "ActivatedCD4CT" )
# # Example usage
# default_comparison_type <- "greater" # Default comparison type
# Perform analysis for 'prol' and 'activated spleen' dataset columns with the updated function
results_prol <- perform_custom_test("prol", prol_columns)
results_prol
results_activated_spleen <- perform_custom_test("activated spleen", actSpln_columns)
results_activated_spleen
all_results_df <- rbind(ActT_results_df, results_prol, results_activated_spleen)
all_results_df
#
library(scales)
library(ggplot2)
library(scales)
library(tidyr)
library(ggpubr)
#-----------------------------------------------------------#
#                     Plot parameters
#-----------------------------------------------------------#
dotSize = 6
xAxisTextSize = 10
yAxisTextSize = 10
titleAxisTextSize = 12
panelBorder = 2
#Makign a function that change the decimal places ofy axis values
scaleFUN <- function(x) sprintf("%.1f", x)
#Creating Y axis label for D-F
# YlabelDF = expression(CD44^"+"~CD62L^"-"~(10^6))
YlabelA =  expression("%"~CD4^"+"~CD69^"+")
YlabelB =  expression(~CD4^"+"~CD69^"+"~"Cells"~(10^6))
YlabelC = expression("%"~CD44^"+"~CD62L^"-"~kI67^"-")
YlabelD = expression(~CD44^"+"~CD62L^"-"~kI67^"-"~"Cells"~(10^6))
YlabelE = expression("%"~CD44^"+"~CD62L^"-"~kI67^"+")
YlabelF = expression(~CD44^"+"~CD62L^"-"~kI67^"+"~"Cells"~(10^6))
YlabelG = expression("%"~CD4^"+"~Foxp3^"+")
YlabelH = expression(CD4^"+"~Foxp3^"+"~"Cells"~(10^6))
#Color selection
WTColor = "#8c8c8c"
KOColor = "#000000"
#-----------------------------------------------------------#
#                     Data Prep                             #
#-----------------------------------------------------------#
WTProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv')
KOProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/KOProl.csv')
ActivatedWTSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedWTSpleen.csv')
ActivatedKOSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedKOSpleen.csv')
# CD69Data = read.csv('C:/Laptop Backups/HomestaticExpansionProject/ModelData/CD69DataFromGen.csv')
# #Removing day 0, because it is always weird
# CD69Data = subset(CD69Data, Age > 0 & Age < 19)
ActivatedWTSpleen$X4TregCTWT = ActivatedWTSpleen$X4TregCT
#Setting up Data
X4TregCTWT = subset(ActivatedWTSpleen, select = c("X4TregCTWT", "Age"))
LongX4TregCTWT = gather(X4TregCTWT, variable, value, -Age)
library(scales)
library(ggplot2)
library(scales)
library(tidyr)
library(ggpubr)
#-----------------------------------------------------------#
#                     Plot parameters
#-----------------------------------------------------------#
dotSize = 6
xAxisTextSize = 10
yAxisTextSize = 10
titleAxisTextSize = 12
panelBorder = 2
#Makign a function that change the decimal places ofy axis values
scaleFUN <- function(x) sprintf("%.1f", x)
#Creating Y axis label for D-F
# YlabelDF = expression(CD44^"+"~CD62L^"-"~(10^6))
YlabelA =  expression("%"~CD4^"+"~CD69^"+")
YlabelB =  expression(~CD4^"+"~CD69^"+"~"Cells"~(10^6))
YlabelC = expression("%"~CD44^"+"~CD62L^"-"~kI67^"-")
YlabelD = expression(~CD44^"+"~CD62L^"-"~kI67^"-"~"Cells"~(10^6))
YlabelE = expression("%"~CD44^"+"~CD62L^"-"~kI67^"+")
YlabelF = expression(~CD44^"+"~CD62L^"-"~kI67^"+"~"Cells"~(10^6))
YlabelG = expression("%"~CD4^"+"~Foxp3^"+")
YlabelH = expression(CD4^"+"~Foxp3^"+"~"Cells"~(10^6))
#Color selection
WTColor = "#8c8c8c"
KOColor = "#000000"
#-----------------------------------------------------------#
#                     Data Prep                             #
#-----------------------------------------------------------#
WTProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv')
KOProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/KOProl.csv')
ActivatedWTSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedWTSpleen.csv')
ActivatedKOSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedKOSpleen.csv')
# CD69Data = read.csv('C:/Laptop Backups/HomestaticExpansionProject/ModelData/CD69DataFromGen.csv')
# #Removing day 0, because it is always weird
# CD69Data = subset(CD69Data, Age > 0 & Age < 19)
ActivatedWTSpleen$X4TregCTWT = ActivatedWTSpleen$X4TregCT
#Setting up Data
X4TregCTWT = subset(ActivatedWTSpleen, select = c("X4TregCTWT", "Age"))
LongX4TregCTWT = gather(X4TregCTWT, variable, value, -Age)
X4TregCTKO = subset(ActivatedKOSpleen, select = c("X4TregCT", "Age"))
LongX4TregCTKO = gather(X4TregCTKO, variable, value, -Age)
LongX4TregCT = rbind(LongX4TregCTWT, LongX4TregCTKO)
LongX4TregCT$variable = factor(LongX4TregCT$variable, levels = c( "X4TregCT", "X4TregCTWT"), labels = c("KO", "WT"))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
labels = c(0, 0.4, 0.8, 1.2))+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
xlim(c(5,10))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
xlim(c(5,10))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
xlim(c(5,10))+
ylim(c(0, 15000))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
# scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
#                    labels = c(0, 0.4, 0.8, 1.2))+
# scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
xlim(c(5,10))+
ylim(c(0, 15000))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
labels = c(0, 0.4, 0.8, 1.2))+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
xlim(c(5,10))+
ylim(c(0, 15000))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
# scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
#                    labels = c(0, 0.4, 0.8, 1.2))+
# scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
xlim(c(5,10))+
ylim(c(0, 15000))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
# scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
#                    labels = c(0, 0.4, 0.8, 1.2))+
# scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))+
xlim(c(5,10))+
ylim(c(0, 15000))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
# scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
#                    labels = c(0, 0.4, 0.8, 1.2))+
# scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))+
xlim(c(5,10))+
ylim(c(0, 15000))+
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))+
xlim(c(5,10))+
ylim(c(0, 15000))+
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))+
xlim(c(5,10))+
ylim(c(0, 15000))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))+
xlim(c(5,10))+
ylim(c(0, 15000))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))
a <- subset(ActivatedWTSpleen, Age == c(7,9))
a
b <- subset(ActivatedKOSpleen, Age == c(7,9))
a$X4TregCT
b$X4TregCT
