scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
xlim(c(5,10))+
ylim(c(0, 15000))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
labels = c(0, 0.4, 0.8, 1.2))+
scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
xlim(c(5,10))+
ylim(c(0, 15000))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
# scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
#                    labels = c(0, 0.4, 0.8, 1.2))+
# scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
xlim(c(5,10))+
ylim(c(0, 15000))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
# scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
#                    labels = c(0, 0.4, 0.8, 1.2))+
# scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
scale_color_manual(values = c(KOColor, WTColor))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))+
xlim(c(5,10))+
ylim(c(0, 15000))+
# scale_y_continuous(breaks = seq(0,3880000, length.out = 5))+
# scale_y_continuous(limits=c(-61560, 1200000), breaks = c(0, 400000, 800000, 1200000),
#                    labels = c(0, 0.4, 0.8, 1.2))+
# scale_x_continuous(breaks = c(0,5,10,15,18), limits=c(0,18.8))+
guides(color = guide_legend(guide_legend(title = "Genotype")))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))+
xlim(c(5,10))+
ylim(c(0, 15000))+
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))+
xlim(c(5,10))+
ylim(c(0, 15000))+
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))+
xlim(c(5,10))+
ylim(c(0, 15000))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))+
xlim(c(5,10))+
ylim(c(0, 15000))
ggplot(LongX4TregCT, aes(x = Age, y = value, color = variable, shape = variable)) +
geom_point(position = position_dodge(1), size = dotSize)+
stat_summary(aes(group=variable, color = variable), fun=mean, geom="line", lwd = 1.3)+
labs(titles = "Treg Cell Count", x = "Age in Days", y = YlabelH)+
theme(panel.background = element_rect(fill = "white", colour = "black"),
legend.position = "none",
axis.title.x = element_text(colour="black", size=xAxisTextSize),
axis.title.y = element_text( colour = "black", size = yAxisTextSize),
plot.title = element_text(lineheight=.8,  size = titleAxisTextSize),
#axis.ticks.length=unit(.25, "cm"),
text = element_text(size=20),
panel.border = element_rect(color = "black",
fill = "NA",
size = panelBorder))+
scale_color_manual(values = c(KOColor, WTColor))
a <- subset(ActivatedWTSpleen, Age == c(7,9))
a
b <- subset(ActivatedKOSpleen, Age == c(7,9))
a$X4TregCT
b$X4TregCT
Minimized = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ParameterSearch_mu_0.39_0.42.csv")
hist(Minimized$Error, breaks = 30)
plot(Minimized$Error, breaks = 30)
hist(Minimized$Error)
#Removing outliers
length(Minimized$Error)
High_Plus = subset(Minimized, Error >= 154000)
###Histograms of all
for (col in 2:ncol(High_Plus)) {
hist(Minimized[,col],
main = colnames(Minimized)[col], breaks= 40)
}
a = quantile(Minimized$a)#There is a way to calculate the lowest percentages
typeof(a)
?prop.test
prop.test(x = c(380, 168),  n= c(4991, 5326), alternative = "greater")
## Individual Plots
MiniMinimized = subset(Minimized, Error < 2.0e+14)
plot(MiniMinimized$EntryNumber, MiniMinimized$Error, type = "l",
main = "Plot of all the Errors",
xlab = "Experiment Number",
ylab = "Error Value")
#Summaries
summary(Minimized$alpha)
summary(Minimized$a)
summary(Minimized$kA)
summary(Minimized$e_T)
summary(Minimized$e_R)
summary(Minimized$g)
summary(Minimized$b_T)
summary(Minimized$b_R)
#For Katrina Lab Meeting
hist(Minimized$alpha, breaks = 40, cex.main=3, cex.lab = 2, cex.axis = 1.5,
main = "alpha: Production Rate of Tregs from Thymus",
xlab = "Parameter Value")
hist(Minimized$a, breaks = 40, cex.main=3, cex.lab = 2, cex.axis = 1.5,
main = "a: Self Replication Rate",
xlab = "Parameter Value")
hist(Minimized$kA, breaks = 40, cex.main=3, cex.lab = 2, cex.axis = 1.5,
main = "kA: Suppression Strength of Tregs",
xlab = "Parameter Value")
hist(Minimized$e_T, cex.main=3, cex.lab = 2, cex.axis = 1.5,
main = "e_T: IL-2 Consumption Rate by AcT",
xlab = "Parameter Value",
breaks = 30)
hist(Minimized$e_R, cex.main=3, cex.lab = 2, cex.axis = 1.5,
main = "e_R: IL-2 Consumption Rate by Treg",
xlab = "Parameter Value",
breaks = 30)
hist(Minimized$g, breaks = 40, cex.main=3, cex.lab = 2, cex.axis = 1.5,
main = "g: Death Rate of Naive T Cells",
xlab = "Parameter Values")
hist(Minimized$b_T, breaks = 40, cex.main=3, cex.lab = 2, cex.axis = 1.5,
main = "b_T: Death Rates of Activ. T",
xlab = "Parameter Value")
hist(Minimized$b_R, breaks = 40, cex.main=3, cex.lab = 2, cex.axis = 1.5,
main = "b_R: Death Rate of Tregs",
xlab = "Parameter Value")
#Removing obvious outliers
Minimized = subset(Minimized, Error < 1.12e+14)
LowError = subset(Minimized, Error < 1.10e+14)
HighError = subset(Minimized, Error >= 1.10e+14)
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
asct = hist(associates$Adj.NetW.11, plot = FALSE)
Bch = hist(bachelors$Adj.NetW.11, plot = FALSE)
plot(Bch, col = c2, main = "idk", xlab = "stuff")
plot(asct, col = c1 , add = TRUE)
#Setting up a loop for histograms
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
Minimized = subset(Minimized, Error < 1.12e+14)
LowError = subset(Minimized, Error < 1.10e+14)
HighError = subset(Minimized, Error >= 1.10e+14)
for (col in 8:ncol(Minimized)) {
LowHist = hist(LowError[,col], breaks = 40, plot = FALSE)
HighHist = hist(HighError[,col], breaks = 40, plot = FALSE)
plot(HighHist, col = c2, main = colnames(Minimized)[col],
xlab = "Parameter Values", plot= FALSE)
plot(LowHist, col = c1, add = TRUE)
hist(Minimized[,col],
main = colnames(Minimized)[col], breaks= 40)
}
LowError = subset(Minimized, Error < 22000)
HighError = subset(Minimized, Error >= 22000 & Error < 133000)
for (col in 8:ncol(Minimized)) {
LowHist = hist(LowError[,col], breaks = 40, plot = FALSE)
HighHist = hist(HighError[,col], breaks = 40, plot = FALSE)
plot(HighHist, col = c2, main = colnames(Minimized)[col],
xlab = "Parameter Values", plot= FALSE)
plot(LowHist, col = c1, add = TRUE)
hist(Minimized[,col],
main = colnames(Minimized)[col], breaks= 40)
}
hist(Minimized$Error, breaks = 30)
hist(Minimized$Error, breaks = 30, xlim = c(2500, 4500))
View(Minimized)
Minimized2 = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ParameterSearch_ALL.csv")
######################################################################
######################################################################
#Finding the error range
Minimized2 = subset(Minimized2, Error > 3000 & Error <7000)
summary(min2$Error)
plot(Minimized2$mu, Minimized2$Error,
main = "mu - Thymic production of Naive T cell ",
ylim = c(3000, 7000),
xlab = "Mu value",
ylab = "Error")
#-------------------------------------------------------#
#             Open ALL
#-------------------------------------------------------#
Min = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ParameterSearch_opnall5.csv")
hist(Min$Error, breaks = 100, xlim = c(2100, 4500),
xlab = "Relative Error Range",
main = "Relative Error Counts",
ylab = "Frequency Counts")
library(ggplot2)
library(ggpubr)
library(ggbreak)
install.packages("ggbreak")
library(ggbreak)
ModeldataWT = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputWT2.csv")
ModeldataKO = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputKO2.csv")
WTData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedWTSpleen.csv")
ProlWTData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv")
KOData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedKOSpleen.csv")
ProlKOData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/KOProl.csv")
WTData$hours = WTData$hours / 24
KOData$hours = KOData$hours / 24
ProlWTData$hours = ProlWTData$hours / 24
ProlKOData$hours = ProlKOData$hours / 24
colnames(ModeldataWT) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
"TregNaive", "ProlNaive", "ProlActT", "ProlTreg", "IL-2", "ThymWeigth")
colnames(ModeldataKO) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
"TregNaive", "ProlNaive", "ProlActT", "ProlTreg", "IL-2", "ThymWeigth")
ModeldataWT$time = 0:431
ModeldataKO$time = 0:431
ModeldataWT$time = ModeldataWT$time / 24
ModeldataKO$time = ModeldataKO$time / 24
dotsize = 4
wdt = 14.6
ht = 8.3
Dotedline = 2
simLine = 2
colnames(ModeldataWT) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
"TregNaive", "ProlNaive", "ProlActT", "ProlTreg", "IL-2", "ThymWeigth")
colnames(ModeldataKO) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
ModeldataWT = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputWT2.csv")
ModeldataKO = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputKO2.csv")
ModeldataWT = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputWT2.csv")
ModeldataKO = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Stats plots and data management/ModelOutputKO2.csv")
WTData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedWTSpleen.csv")
ProlWTData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv")
KOData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedKOSpleen.csv")
ProlKOData = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/KOProl.csv")
WTData$hours = WTData$hours / 24
KOData$hours = KOData$hours / 24
ProlWTData$hours = ProlWTData$hours / 24
ProlKOData$hours = ProlKOData$hours / 24
colnames(ModeldataWT) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
"TregNaive", "ProlNaive", "ProlActT", "ProlTreg", "IL-2", "ThymWeigth")
colnames(ModeldataKO) = c("NaiveCT", "ActTCT", "TregCT", "ThyNaive", "ActTNaive", "ThyTregs",
"TregNaive", "ProlNaive", "ProlActT", "ProlTreg", "IL-2", "ThymWeigth")
ModeldataWT$time = 0:431
ModeldataKO$time = 0:431
ModeldataWT$time = ModeldataWT$time / 24
ModeldataKO$time = ModeldataKO$time / 24
library(pracma)
install.packages("pracma")
library(pracma)
auc_wt <- trapz(ModeldataWT$time, ModeldataWT$TregNaive)
auc_ko <- trapz(ModeldataKO$time, ModeldataKO$TregNaive)
wilcox.test(ModeldataWT$TregNaive, ModeldataKO$TregNaive)
# Compare the AUCs using the Mann-Whitney U test
test_result <- wilcox.test(ModeldataWT$TregNaive, ModeldataKO$TregNaive)
# Output the AUC values and test results
list(AUC_WT = auc_wt, AUC_KO = auc_ko, Test_Result = test_result)
auc_wt
auc_ko
# Compare the AUCs using the Mann-Whitney U test
test_result <- wilcox.test(x = auc_WT, y = auc_KO, alternative = "two.sided")
# Compare the AUCs using the Mann-Whitney U test
test_result <- wilcox.test(x = auc_wt, y = auc_ko, alternative = "two.sided")
test_result
# Output the AUC values and test results
list(AUC_WT = auc_wt, AUC_KO = auc_ko, Test_Result = test_result)
auc_wt <- trapz(ModeldataWT$time, ModeldataWT$TregCT)
auc_ko <- trapz(ModeldataKO$time, ModeldataKO$TregCT)
#
test_result <- wilcox.test(ModeldataWT$TregNaive, ModeldataKO$TregNaive)
# Output the AUC values and test results
list(AUC_WT = auc_wt, AUC_KO = auc_ko, Test_Result = test_result)
auc_wt - auc_ko
#-------------------------------------------------------#
#             Open ALL
#-------------------------------------------------------#
Min_all = read.csv("C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/Data/ParameterSearch_opnall5.csv")
hist(Min_all$Error, breaks = 100, xlim = c(2100, 4500),
xlab = "Relative Error Range",
main = "Relative Error Distribution",
ylab = "Frequency Counts")
summary(Min_all)
summary(Min_all$Error)
WTProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/WTProl.csv')
KOProl = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/KOProl.csv')
ActivatedWTSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedWTSpleen.csv')
ActivatedKOSpleen = read.csv('C:/Laptop Backups/HomestaticExpansionProject/Code/Modeling/Matlab/RawData/ActivatedKOSpleen.csv')
ActT = read.csv('C:/Laptop Backups/HomestaticExpansionProject/ModelData/TCellActivationSummary_filled.csv')
ActT$Genotype[ActT$Genotype == "IL-2-KO"] = "KO"
ActT$Genotype[ActT$Genotype == "IL-2-HET"] = "WT"
ActT$Genotype[ActT$Genotype == "CD25-KO"] = "KO"
ActT[ActT$Genotype != "",]
ActT = ActT[!(ActT$Genotype == ""),]
ActT$Age <- ifelse(ActT$Age >= 18, 18, ActT$Age)
ActT = subset(ActT, Age <= 18 & Age > 0)
#Removing age 16
ActT = ActT[ActT$Age != 16, ]
#Removing age 7
ActT = ActT[ActT$Age != 7, ]
WTProl$NaiveProlCT
perform_custom_test <- function(dataset_type, columns_of_interest, default_comparison_type = "greater") {
# Initialize an empty dataframe to store all results
all_results_df <- data.frame(column_of_interest=character(),
age=integer(),
p_value=numeric(),
test=character(),
hypothesis=character(),
n_values=character(),
stringsAsFactors=FALSE)
all_results_failed <- data.frame(column_of_interest=character(),
age=integer(),
p_value=numeric(),
test=character(),
hypothesis=character(),
n_values=character(),
stringsAsFactors=FALSE)
# Columns requiring 'less' comparison
columns_less_comparison <- c("X4TregCT", "X4TregRatio")
# # Columns requiring a t-test
# data_ttest <- c("NonProlActivatedRatio", "ActivatedProlRatio", "X4TregRatio")
# Iterate over each column of interest
for (column_of_interest in columns_of_interest) {
# Determine the comparison type based on the column
comparison_type <- ifelse(column_of_interest %in% columns_less_comparison, "less", default_comparison_type)
# Select appropriate datasets based on dataset_type
if (dataset_type == "prol") {
WT_data <- WTProl
KO_data <- KOProl
} else if (dataset_type == "activated spleen") {
WT_data <- ActivatedWTSpleen
KO_data <- ActivatedKOSpleen
} else {
stop("Invalid dataset type provided.")
}
# Get all unique ages from both datasets
all_ages <- unique(c(WT_data$Age, KO_data$Age))
# Loop through each age
for (age in all_ages) {
# Subset the data for the current age
wt_age_data <- subset(WT_data, Age == age)[, column_of_interest, drop=FALSE]
ko_age_data <- subset(KO_data, Age == age)[, column_of_interest, drop=FALSE]
# Construct a key for lookup
check_key <- paste(age, column_of_interest, sep="_")
# Check if both subsets have data
if (nrow(wt_age_data) > 0 & nrow(ko_age_data) > 0) {
# Decide which test to use based on the reference
if (check_key %in% nor_dist_flat) {
# If the age-column combination is in the normally distributed reference, use t.test
test_result <- tryCatch(t.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type),
error = function(e) list(p.value = NA, statistic = NA))
test_type = "t.test"
} else {
# Otherwise, use wilcox.test
test_result <- tryCatch(wilcox.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type, exact = FALSE),
error = function(e) list(p.value = NA, statistic = NA))
test_type = "wilcox"
}
# if (test_type == "t.test") {
#   test_result <- t.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type)
# } else {
#   test_result <- wilcox.test(ko_age_data[[1]], wt_age_data[[1]], alternative=comparison_type, exact = FALSE)
# }
# Number of values for WT and KO
n_values_wt <- nrow(wt_age_data)
n_values_ko <- nrow(ko_age_data)
# Append to all_results_df if p-value <= 0.05
if (test_result$p.value <= 0.05) {
all_results_df <- rbind(all_results_df, data.frame(column_of_interest=column_of_interest,
age=age,
p_value=test_result$p.value,
test=test_type,
hypothesis=comparison_type,
n_values=paste(n_values_wt, n_values_ko, sep=", ")))
} else {
all_results_failed <- rbind(all_results_failed, data.frame(column_of_interest=column_of_interest,
age=age,
p_value=test_result$p.value,
test=test_type,
hypothesis=comparison_type,
n_values=paste(n_values_wt, n_values_ko, sep=", ")))
}
}
}
}
return(list(passed = all_results_df, failed = all_results_failed))
}
actT_naive_columns <- c("ThymicNaive", "NaiveCT")
prol_naive_columns <- c("NaiveProlRatio", "NaiveProlCT")
naive_acT_results <- perform_custom_test("activated spleen", actT_naive_columns)
#
# # #Preparing final dataframe
# # all_results_df <- data.frame(age=integer(),
# #                          comparison_type=character(),
# #                          p_value=numeric(),
# #                          test=character(),
# #                          hypothesis=character(),
# #                          stringsAsFactors=FALSE)
# #
# Based on Shapiro_Wilk_Normal_columns.csv & Shapiro_Wilk_ActT_Normal_columns.csv results
nor_dist_reference <- list(c(4, "X4TregRatio"), c(4, "ActivatedProlRatio"),
c(4, "NonProlActivatedRatio"), c(4, "ActivatedProlRatio"),
c(4, "pct_CD4_CD44_pos_CD62L_neg"), c(4, "pct_CD4_CD69_pos"),
c(9, "NonProlActivatedCT"), c(9, "ActivatedProlCT"),
c(9, "EarlyActivatedCD4CT"), c(9, "X4TregCT"),
c(9, "ActivatedCD4CT"),
c(12, "pct_CD4_CD44_pos_CD62L_neg"),
c(14, "pct_CD4_CD44_pos_CD62L_neg"), c(14, "pct_CD4_CD69_pos"),
c(18, "X4TregRatio"), c(18, "pct_CD4_CD69_pos"))
#Flattening the data for easy referencing
nor_dist_flat <- sapply(nor_dist_reference, function(x) paste(x[1], x[2], sep="_"))
naive_acT_results <- perform_custom_test("activated spleen", actT_naive_columns)
naive_actT_passed <- naive_acT_results$passed
naive_actT_failed <- naive_acT_results$failed
View(naive_actT_failed)
